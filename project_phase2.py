# -*- coding: utf-8 -*-
"""Project_Phase2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11e47N9PhQS7yj9tMNNMQexuBBiCI3dcK

Upload the Dataset
"""

from google.colab import files
uploaded = files.upload()

"""Load the Dataset"""

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd

# Step 1: Load the diabetes dataset (built-in healthcare-like dataset)
data = load_diabetes()

# Step 2: Convert to DataFrame
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target  # This is the outcome variable (disease progression)

# Step 3: Preview the dataset
print("Sample data:")
print(df.head())

# Step 4: Split the dataset into features and target
X = df.drop('target', axis=1)
y = df['target']

# Step 5: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Now you can use X_train_scaled and y_train for training an AI model
print("\nTransformed training data:")
print(X_train_scaled[:5])

"""Data Exploration"""

#Display first few rows
df.head()

# Shape of the dataset
print("Shape:", df.shape)
# Column names
print("Columns:", df.columns.tolist())
# Data types and non-null values
df.info()
# Summary statistics for numeric features
df.describe()

"""Check for missing Values and Duplicates"""

# Check for missing values
print(df.isnull().sum())
# Check for duplicates
print("Duplicate rows:", df.duplicated().sum())

"""Visualize a Few Features"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes

# Step 1: Load the diabetes dataset (real healthcare dataset)
data = load_diabetes()

# Step 2: Convert to a DataFrame for easier visualization
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target  # Disease progression score

# Step 3: Display basic info
print("Dataset shape:", df.shape)
print(df.head())

# Step 4: Visualize a few features
# Example 1: Pairplot of a few selected features
selected_features = ['bmi', 'bp', 's1', 's5', 'target']
sns.pairplot(df[selected_features], diag_kind='kde')
plt.suptitle("Pairplot of Selected Healthcare Features", y=1.02)
plt.show()

# Example 2: Correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df[selected_features].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap of Selected Features")
plt.show()

# Example 3: Scatter plot of BMI vs disease progression
plt.figure(figsize=(6, 4))
sns.scatterplot(data=df, x='bmi', y='target')
plt.title("BMI vs Disease Progression")
plt.xlabel("BMI")
plt.ylabel("Disease Progression Score")
plt.grid(True)
plt.show()

"""Identify Target and Features"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import pandas as pd

# Sample healthcare dataset
data = pd.DataFrame({
    'Age': [65, 45, 70, 30, 85],
    'Blood_Pressure': [140, 120, 150, 110, 160],
    'Heart_Rate': [90, 85, 95, 70, 100],
    'Chronic_Disease': [1, 0, 1, 0, 1],  # 1 if present, 0 otherwise
    'High_Risk': [1, 0, 1, 0, 1]  # Target variable
})

# Features and target
X = data[['Age', 'Blood_Pressure', 'Heart_Rate', 'Chronic_Disease']]
y = data['High_Risk']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model: Random Forest
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Classification Report:")
print(classification_report(y_test, y_pred))

"""Convert Categorical Columns to Numerical"""

# Identify categorical columns
categorical_cols = df.select_dtypes(include=['object']).columns
print("Categorical Columns:", categorical_cols.tolist())

"""One-Hot Encoding"""

df_encoded = pd.get_dummies(df, drop_first=True)

"""Feature Scaling"""

import pandas as pd
from sklearn.preprocessing import StandardScaler

# Sample healthcare data
data = pd.DataFrame({
    'Age': [25, 60, 45, 35, 70],
    'Blood_Sugar': [85, 200, 150, 120, 250],
    'BMI': [22.0, 35.5, 30.0, 28.5, 40.0],
    'Diabetic': [0, 1, 1, 0, 1]
})

# Features before scaling
X = data[['Age', 'Blood_Sugar', 'BMI']]
y = data['Diabetic']

# Apply standard scaling (mean = 0, std = 1)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Convert back to DataFrame for readability
X_scaled_df = pd.DataFrame(X_scaled, columns=['Age', 'Blood_Sugar', 'BMI'])

print("Original Features:\n", X)
print("\nScaled Features:\n", X_scaled_df)

"""Train-Test Split"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""Model Building"""

# Train model
model = LinearRegression()
model.fit(X_train, y_train)
# Predict
y_pred = model.predict(X_test)

"""Evaluation"""

# Evaluate
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

"""Make Predictions from New Input"""

# Sample input (replace values with any other valid values from the original dataset)
new_student = {
'school': 'GP', # 'GP' or 'MS'
'sex': 'F', # 'F' or 'M'
'age': 17, # Integer
'address': 'U', # 'U' or 'R'
'famsize': 'GT3', # 'LE3' or 'GT3'
'Pstatus': 'A', # 'A' or 'T'
'Medu': 4, # 0 to 4
'Fedu': 3, # 0 to 4
'Mjob': 'health', # 'teacher', 'health', etc.
'Fjob': 'services',
'reason': 'course',
'guardian': 'mother',
'traveltime': 2,
'studytime': 3,
'failures': 0,
'schoolsup': 'yes',
'famsup': 'no',
'paid': 'no',
'activities': 'yes',
'nursery': 'yes',
'higher': 'yes',
'internet': 'yes',
'romantic': 'no',
'famrel': 4,
'freetime': 3,
'goout': 3,
'Dalc': 1,
'Walc': 1,
'health': 4,
'absences': 2,
 'G1': 14,
'G2': 15
}

"""Convert to DataFrame and Encode"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Raw patient data (list of dictionaries)
patient_data = [
    {'Gender': 'Male', 'Smoker': 'Yes', 'Symptom_Severity': 'High', 'Needs_Evaluation': 1},
    {'Gender': 'Female', 'Smoker': 'No', 'Symptom_Severity': 'Low', 'Needs_Evaluation': 0},
    {'Gender': 'Male', 'Smoker': 'No', 'Symptom_Severity': 'Medium', 'Needs_Evaluation': 1},
    {'Gender': 'Female', 'Smoker': 'Yes', 'Symptom_Severity': 'High', 'Needs_Evaluation': 1},
]

# Convert to DataFrame
df = pd.DataFrame(patient_data)

# Encode categorical features
encoder = LabelEncoder()
df['Gender'] = encoder.fit_transform(df['Gender'])               # Male:1, Female:0
df['Smoker'] = encoder.fit_transform(df['Smoker'])               # Yes:1, No:0
df['Symptom_Severity'] = encoder.fit_transform(df['Symptom_Severity'])  # High:0, Low:1, Medium:2 (alphabetical)

# Final encoded DataFrame
print("Encoded DataFrame:\n", df)

"""Predict the Final Grade"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Simulated patient health data
data = pd.DataFrame({
    'Age': [25, 50, 35, 60, 40],
    'Hospital_Visits': [1, 5, 2, 6, 3],
    'Medication_Adherence': [9, 4, 8, 3, 7],
    'Exercise_Freq': [5, 1, 4, 0, 3],
    'Final_Health_Grade': [90, 60, 85, 50, 75]  # Target variable
})

# Features and target
X = data[['Age', 'Hospital_Visits', 'Medication_Adherence', 'Exercise_Freq']]
y = data['Final_Health_Grade']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model: Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test data
predictions = model.predict(X_test)

# Show predictions
for i, pred in enumerate(predictions):
    print(f"Predicted Final Health Grade for test case {i+1}: {pred:.2f}")

"""Deployment-Building an Interactive App"""

!pip install gradio

"""Create a Prediction Function"""

import pandas as pd
from sklearn.linear_model import LinearRegression

# Sample patient data to train on
data = pd.DataFrame({
    'Age': [25, 50, 35, 60, 40],
    'Hospital_Visits': [1, 5, 2, 6, 3],
    'Medication_Adherence': [9, 4, 8, 3, 7],
    'Exercise_Freq': [5, 1, 4, 0, 3],
    'Final_Health_Grade': [90, 60, 85, 50, 75]
})

# Prepare features and target
X = data[['Age', 'Hospital_Visits', 'Medication_Adherence', 'Exercise_Freq']]
y = data['Final_Health_Grade']

# Train the model
model = LinearRegression()
model.fit(X, y)

# ðŸ”® Define the prediction function
def predict_health_grade(age, visits, adherence, exercise_days):
    input_data = pd.DataFrame([{
        'Age': age,
        'Hospital_Visits': visits,
        'Medication_Adherence': adherence,
        'Exercise_Freq': exercise_days
    }])
    prediction = model.predict(input_data)[0]
    return round(prediction, 2)

# âœ… Example usage
grade = predict_health_grade(age=45, visits=2, adherence=8, exercise_days=4)
print(f"Predicted Final Health Grade: {grade}")

"""Create the Gradio Interface"""

import pandas as pd
from sklearn.linear_model import LinearRegression
import gradio as gr

# Training dataset
data = pd.DataFrame({
    'Age': [25, 50, 35, 60, 40],
    'Hospital_Visits': [1, 5, 2, 6, 3],
    'Medication_Adherence': [9, 4, 8, 3, 7],
    'Exercise_Freq': [5, 1, 4, 0, 3],
    'Final_Health_Grade': [90, 60, 85, 50, 75]
})

# Train model
X = data[['Age', 'Hospital_Visits', 'Medication_Adherence', 'Exercise_Freq']]
y = data['Final_Health_Grade']
model = LinearRegression()
model.fit(X, y)

# Prediction function
def predict_health_grade(age, visits, adherence, exercise):
    input_df = pd.DataFrame([{
        'Age': age,
        'Hospital_Visits': visits,
        'Medication_Adherence': adherence,
        'Exercise_Freq': exercise
    }])
    prediction = model.predict(input_df)[0]
    return f"Predicted Final Health Grade: {round(prediction, 2)}"

# Gradio interface
iface = gr.Interface(
    fn=predict_health_grade,
    inputs=[
        gr.Slider(18, 100, label="Age"),
        gr.Slider(0, 10, step=1, label="Hospital Visits"),
        gr.Slider(0, 10, label="Medication Adherence (0-10)"),
        gr.Slider(0, 7, step=1, label="Exercise Frequency (days/week)")
    ],
    outputs="text",
    title="AI-Powered Health Grade Predictor",
    description="Enter patient details to predict final health grade based on health habits and medical history."
)

iface.launch()